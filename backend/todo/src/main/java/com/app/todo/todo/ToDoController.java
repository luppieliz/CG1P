package com.app.todo.todo;

import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.ServletUriComponentsBuilder;

import java.net.URI;
import java.util.List;

@CrossOrigin(origins="http://localhost:4200")
@RestController
public class ToDoController {
    private ToDoServiceImpl toDoService;

    @Autowired
    public ToDoController(ToDoServiceImpl toDoService) {
        this.toDoService = toDoService;
    }

    @ApiOperation(value = "View a list of todos generated by a specific user", response = Iterable.class)
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Successfully retrieved todo list"),
            @ApiResponse(code = 401, message = "You are not authorized to view the resource"),
            @ApiResponse(code = 403, message = "Accessing the resource you were trying to reach is forbidden"),
            @ApiResponse(code = 404, message = "The resource you were trying to reach is not found")
    }
    )
    @GetMapping(path = "/{username}/todos", produces = "application/json")
    public List<ToDo> getTodosByUsername(
            @PathVariable (value = "username") String username) {
        return toDoService.findToDoByUsername(username);
    }

    @ApiOperation(value = "View a specific todo of a specific user based on its id")
    @GetMapping(path = "/{username}/todos/{todoId}", produces = "application/json")
    public ToDo getTodo(
            @PathVariable (value = "username") String username, @PathVariable (value = "todoId") Long todoId) {
        return toDoService.getSpecificToDo(username, todoId);
    }

    @ApiOperation(value = "Delete a specific todo of a specific user based on its id")
    @DeleteMapping(path = "/{username}/todos/{todoId}", produces = "application/json")
    public ResponseEntity<Void> deleteTodo(
            @PathVariable (value = "username") String username, @PathVariable (value = "todoId") Long todoId) {
        toDoService.deleteSpecificToDo(username, todoId);

        // return 204 no content
        return ResponseEntity.noContent().build();
    }

    @ApiOperation(value = "Update a specific todo of a specific user based on its id")
    @PutMapping(path = "/{username}/todos/{todoId}", produces = "application/json")
    public ResponseEntity<ToDo> updateTodo(
            @PathVariable (value = "username") String username, @PathVariable (value = "todoId") Long todoId, @RequestBody ToDo newToDo) {
        toDoService.updateSpecificToDo(username, todoId, newToDo);
        return new ResponseEntity<ToDo>(newToDo, HttpStatus.OK);
    }

    // REST standard: Should return URI of new resource
    
    // public void createTodo(
    //         @PathVariable (value = "username") String username, @RequestBody ToDo newToDo) {
    //     toDoService.addToDo(username, newToDo);
    // }

    @ApiOperation(value = "Create a new todo by a specific user")
    @PostMapping(path = "/{username}/todos", produces = "application/json")
   public ResponseEntity<Void> createTodo(
           @PathVariable (value = "username") String username, @RequestBody ToDo newToDo) {
       ToDo createdNewTodo = toDoService.addToDo(username, newToDo);

       // append id to new URI
       URI uri = ServletUriComponentsBuilder.fromCurrentRequest()
               .path("/{id}").buildAndExpand(createdNewTodo.getId()).toUri();
       return ResponseEntity.created(uri).build();
   }
}
