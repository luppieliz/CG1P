{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minh\\\\OneDrive\\\\Desktop\\\\CS 203 Project\\\\frontend\\\\todo-app\\\\src\\\\Components\\\\AuthenticatedRoute.jsx\";\nimport React, { Component } from 'react';\nimport { Route, Redirect } from 'react-router-dom';\nimport axios from 'axios';\nimport AuthenticationService from '../api/AuthenticationService.js';\nimport { SESSION_INTERCEPTOR, SESSION_TOKEN } from '../Constants.js'; // Ensures user is authenticated before granting access to a route, else redirect to login\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass AuthenticatedRoute extends Component {\n  // intercept HTTP requests and include token\n  setupAxiosInterceptors() {\n    const interceptor = axios.interceptors.request.use(config => {\n      if (AuthenticationService.isUserLoggedIn()) {\n        console.log('isloggedin triggered from interceptor');\n        config.headers.authorization = sessionStorage.getItem(SESSION_TOKEN);\n      }\n\n      return config;\n    });\n    sessionStorage.setItem(SESSION_INTERCEPTOR, interceptor);\n  }\n\n  componentDidMount() {\n    this.setupAxiosInterceptors();\n  }\n\n  render() {\n    if (AuthenticationService.isUserLoggedIn()) {\n      console.log('isloggedin triggered from route render'); // spread operator - take all properties\n\n      return /*#__PURE__*/_jsxDEV(Route, { ...this.props\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 20\n      }, this);\n    } else {\n      return /*#__PURE__*/_jsxDEV(Redirect, {\n        to: \"/login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 20\n      }, this);\n    }\n  }\n\n}\n\nexport default AuthenticatedRoute;","map":{"version":3,"sources":["C:/Users/Minh/OneDrive/Desktop/CS 203 Project/frontend/todo-app/src/Components/AuthenticatedRoute.jsx"],"names":["React","Component","Route","Redirect","axios","AuthenticationService","SESSION_INTERCEPTOR","SESSION_TOKEN","AuthenticatedRoute","setupAxiosInterceptors","interceptor","interceptors","request","use","config","isUserLoggedIn","console","log","headers","authorization","sessionStorage","getItem","setItem","componentDidMount","render","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,KAAT,EAAgBC,QAAhB,QAAgC,kBAAhC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,qBAAP,MAAkC,iCAAlC;AACA,SAASC,mBAAT,EAA8BC,aAA9B,QAAmD,iBAAnD,C,CAEA;;;;AACA,MAAMC,kBAAN,SAAiCP,SAAjC,CAA2C;AAEvC;AACAQ,EAAAA,sBAAsB,GAAG;AACrB,UAAMC,WAAW,GAAGN,KAAK,CAACO,YAAN,CAAmBC,OAAnB,CAA2BC,GAA3B,CAChBC,MAAM,IAAI;AACN,UAAIT,qBAAqB,CAACU,cAAtB,EAAJ,EAA4C;AACxCC,QAAAA,OAAO,CAACC,GAAR,CAAY,uCAAZ;AACAH,QAAAA,MAAM,CAACI,OAAP,CAAeC,aAAf,GAA+BC,cAAc,CAACC,OAAf,CAAuBd,aAAvB,CAA/B;AACH;;AACD,aAAOO,MAAP;AACH,KAPe,CAApB;AASAM,IAAAA,cAAc,CAACE,OAAf,CAAuBhB,mBAAvB,EAA4CI,WAA5C;AACH;;AAEDa,EAAAA,iBAAiB,GAAG;AAChB,SAAKd,sBAAL;AACH;;AAEDe,EAAAA,MAAM,GAAG;AACL,QAAInB,qBAAqB,CAACU,cAAtB,EAAJ,EAA4C;AACxCC,MAAAA,OAAO,CAACC,GAAR,CAAY,wCAAZ,EADwC,CAExC;;AACA,0BAAO,QAAC,KAAD,OAAW,KAAKQ;AAAhB;AAAA;AAAA;AAAA;AAAA,cAAP;AACH,KAJD,MAIO;AACH,0BAAO,QAAC,QAAD;AAAU,QAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;AACJ;;AA5BsC;;AA+B3C,eAAejB,kBAAf","sourcesContent":["import React, { Component } from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport axios from 'axios'\r\nimport AuthenticationService from '../api/AuthenticationService.js';\r\nimport { SESSION_INTERCEPTOR, SESSION_TOKEN } from '../Constants.js';\r\n\r\n// Ensures user is authenticated before granting access to a route, else redirect to login\r\nclass AuthenticatedRoute extends Component {\r\n\r\n    // intercept HTTP requests and include token\r\n    setupAxiosInterceptors() {\r\n        const interceptor = axios.interceptors.request.use(\r\n            config => {\r\n                if (AuthenticationService.isUserLoggedIn()) {\r\n                    console.log('isloggedin triggered from interceptor')\r\n                    config.headers.authorization = sessionStorage.getItem(SESSION_TOKEN)\r\n                }\r\n                return config\r\n            }\r\n        )\r\n        sessionStorage.setItem(SESSION_INTERCEPTOR, interceptor)\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setupAxiosInterceptors()\r\n    }\r\n\r\n    render() {\r\n        if (AuthenticationService.isUserLoggedIn()) {\r\n            console.log('isloggedin triggered from route render')\r\n            // spread operator - take all properties\r\n            return <Route {...this.props} />\r\n        } else {\r\n            return <Redirect to=\"/login\" />\r\n        }\r\n    }\r\n}\r\n\r\nexport default AuthenticatedRoute"]},"metadata":{},"sourceType":"module"}