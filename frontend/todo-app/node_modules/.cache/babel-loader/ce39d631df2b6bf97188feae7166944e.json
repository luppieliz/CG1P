{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Minh\\\\OneDrive\\\\Desktop\\\\CS 203 Project\\\\frontend\\\\todo-app\\\\src\\\\Components\\\\todo\\\\TodoComponent.jsx\";\nimport React, { Component } from 'react';\nimport moment from 'moment';\nimport { Form, Formik, Field, ErrorMessage } from 'formik';\nimport TodoDataService from '../../api/todo/TodoDataService.js';\nimport AuthenticationService from './AuthenticationService.js'; // Page to update or add a specific todo\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass TodoComponent extends Component {\n  constructor(props) {\n    super(props); // State of the page - contains id, desc, and date for a specific todo.\n\n    this.state = {\n      id: this.props.match.params.id,\n      description: '',\n      targetDate: moment(new Date()).format('YYYY-MM-DD')\n    };\n    this.onSubmit = this.onSubmit.bind(this);\n    this.validate = this.validate.bind(this);\n  } // on load of page\n\n\n  componentDidMount() {\n    // if -1 (create), do not try to load todo as it is empty\n    if (this.state.id === \"-1\") {\n      return;\n    }\n\n    let username = AuthenticationService.getLoggedInUserName();\n    TodoDataService.retrieveTodo(username, this.state.id).then(response => this.setState({\n      description: response.data.description,\n      targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\n    }));\n  } // on Formik Submit\n\n\n  onSubmit(values) {\n    let username = AuthenticationService.getLoggedInUserName();\n    let todo = {\n      id: this.state.id,\n      description: values.description,\n      targetDate: values.targetDate\n    };\n    console.log(this.state.id); // if state (todo id) is -1, means todo does not exist yet, means create todo\n\n    if (this.state.id == -1) {\n      console.log(\"id=1\");\n      TodoDataService.createTodo(username, todo).then(() => this.props.history.push(\"/todos\")); // else state (todo id) is not -1, means todo exists, means update todo\n    } else {\n      TodoDataService.updateTodo(username, this.state.id, todo).then(() => this.props.history.push(\"/todos\"));\n    }\n  } // on Formik Validate call\n  // if errors populated, will not call onSubmit above\n\n\n  validate(values) {\n    let errors = {};\n\n    if (!values.description) {\n      errors.description = \"Enter a description\";\n    } else if (values.description.length < 5) {\n      errors.description = \"Enter at least 5 characters for description\";\n    }\n\n    if (!moment(values.targetDate).isValid()) {\n      errors.targetDate = \"Enter a valid target Date\";\n    }\n\n    return errors;\n  }\n\n  render() {\n    // rely on modern JS destructuring, can assign/retrieve together\n    let {\n      description,\n      targetDate\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        className: \"text-white\",\n        children: \"Todo\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container text-white\",\n        children: /*#__PURE__*/_jsxDEV(Formik, {\n          initialValues: {\n            description,\n            targetDate\n          },\n          onSubmit: this.onSubmit,\n          validateOnChange: false,\n          validateOnBlur: false,\n          validate: this.validate,\n          enableReinitialize: true,\n          children: props => /*#__PURE__*/_jsxDEV(Form, {\n            children: [/*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"description\",\n              component: \"div\",\n              className: \"alert alert-warning \"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 108,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"targetDate\",\n              component: \"div\",\n              className: \"alert alert-warning\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 109,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 111,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"text\",\n                name: \"description\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 112,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n              className: \"form-group\",\n              children: [/*#__PURE__*/_jsxDEV(\"label\", {\n                children: \"Target Date\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 115,\n                columnNumber: 41\n              }, this), /*#__PURE__*/_jsxDEV(Field, {\n                className: \"form-control\",\n                type: \"date\",\n                name: \"targetDate\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 116,\n                columnNumber: 41\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 114,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"btn btn-success\",\n              type: \"submit\",\n              children: \"Save\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 118,\n              columnNumber: 37\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 33\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default TodoComponent;","map":{"version":3,"sources":["C:/Users/Minh/OneDrive/Desktop/CS 203 Project/frontend/todo-app/src/Components/todo/TodoComponent.jsx"],"names":["React","Component","moment","Form","Formik","Field","ErrorMessage","TodoDataService","AuthenticationService","TodoComponent","constructor","props","state","id","match","params","description","targetDate","Date","format","onSubmit","bind","validate","componentDidMount","username","getLoggedInUserName","retrieveTodo","then","response","setState","data","values","todo","console","log","createTodo","history","push","updateTodo","errors","length","isValid","render"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport moment from 'moment'\r\nimport { Form, Formik, Field, ErrorMessage } from 'formik'\r\nimport TodoDataService from '../../api/todo/TodoDataService.js'\r\nimport AuthenticationService from './AuthenticationService.js'\r\n\r\n// Page to update or add a specific todo\r\nclass TodoComponent extends Component {\r\n\r\n\r\n\r\n    constructor(props) {\r\n        super(props)\r\n\r\n        // State of the page - contains id, desc, and date for a specific todo.\r\n        this.state = {\r\n            id: this.props.match.params.id,\r\n            description: '',\r\n            targetDate: moment(new Date()).format('YYYY-MM-DD')\r\n\r\n        }\r\n\r\n        this.onSubmit = this.onSubmit.bind(this);\r\n        this.validate = this.validate.bind(this);\r\n\r\n    }\r\n\r\n    // on load of page\r\n    componentDidMount() {\r\n\r\n\r\n        // if -1 (create), do not try to load todo as it is empty\r\n        if (this.state.id === \"-1\") {\r\n            return\r\n        }\r\n\r\n        let username = AuthenticationService.getLoggedInUserName();\r\n\r\n        TodoDataService.retrieveTodo(username, this.state.id)\r\n            .then(\r\n                response => this.setState({\r\n                    description: response.data.description,\r\n                    targetDate: moment(response.data.targetDate).format('YYYY-MM-DD')\r\n                })\r\n            )\r\n    }\r\n\r\n    // on Formik Submit\r\n    onSubmit(values) {\r\n        let username = AuthenticationService.getLoggedInUserName();\r\n        let todo = {\r\n            id: this.state.id,\r\n            description: values.description,\r\n            targetDate: values.targetDate\r\n        }\r\n\r\n        console.log(this.state.id)\r\n\r\n        // if state (todo id) is -1, means todo does not exist yet, means create todo\r\n        if (this.state.id == -1) {\r\n            console.log(\"id=1\")\r\n            TodoDataService.createTodo(username, todo)\r\n                .then(() => this.props.history.push(\"/todos\"))\r\n            // else state (todo id) is not -1, means todo exists, means update todo\r\n        } else {\r\n            TodoDataService.updateTodo(username, this.state.id, todo)\r\n                .then(() => this.props.history.push(\"/todos\"))\r\n        }\r\n    }\r\n\r\n    // on Formik Validate call\r\n    // if errors populated, will not call onSubmit above\r\n    validate(values) {\r\n        let errors = {}\r\n\r\n        if (!values.description) {\r\n            errors.description = \"Enter a description\"\r\n        } else if (values.description.length < 5) {\r\n            errors.description = \"Enter at least 5 characters for description\"\r\n        }\r\n\r\n        if (!moment(values.targetDate).isValid()) {\r\n            errors.targetDate = \"Enter a valid target Date\"\r\n        }\r\n\r\n        return errors\r\n    }\r\n\r\n    render() {\r\n        // rely on modern JS destructuring, can assign/retrieve together\r\n        let { description, targetDate } = this.state\r\n\r\n        return (\r\n            <div>\r\n                <h1 className=\"text-white\">Todo</h1>\r\n                <div className=\"container text-white\">\r\n                    <Formik\r\n                        initialValues={{ description, targetDate }}\r\n                        onSubmit={this.onSubmit}\r\n                        validateOnChange={false}\r\n                        validateOnBlur={false}\r\n                        validate={this.validate}\r\n                        enableReinitialize={true}\r\n                    >\r\n                        {\r\n                            (props) => (\r\n                                <Form>\r\n                                    <ErrorMessage name=\"description\" component=\"div\" className=\"alert alert-warning \"></ErrorMessage>\r\n                                    <ErrorMessage name=\"targetDate\" component=\"div\" className=\"alert alert-warning\"></ErrorMessage>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label >Description</label>\r\n                                        <Field className=\"form-control\" type=\"text\" name=\"description\"></Field>\r\n                                    </fieldset>\r\n                                    <fieldset className=\"form-group\">\r\n                                        <label>Target Date</label>\r\n                                        <Field className=\"form-control\" type=\"date\" name=\"targetDate\"></Field>\r\n                                    </fieldset>\r\n                                    <button className=\"btn btn-success\" type=\"submit\" >Save</button>\r\n                                </Form>\r\n                            )\r\n                        }\r\n                    </Formik>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default TodoComponent;"]},"metadata":{},"sourceType":"module"}